
https://supercoding.notion.site/_-8e196a70179f4fc886d894c3e0ee6197
## <프로젝트 요구사항>

- README에 개발정보를 요약한다.
- 필수 기능을 우선적으로 구현한다.
- 커밋을 하면서 개발을 진행한다.
- feature 개발이 끝나면 dev(또는 develop) 브랜치에 PR을 생성 후 머지한다. (feature 단위 혹은 하루 작업 사항 단위로 PR을 생성하자)
- 구현해야할 기능을 깃허브 issue 항목에 등록하고 label을 설정해서 사용한다.

## <기획서 요구사항>

- Word Search 게임을 만들 수 있는 어드민 페이지 (Word Search Maker) 제작
- Word Search Maker에서 Title, Description 및 10개 이상의 단어를 등록하여 게임을 생성할 수 있음
- Word Search Maker에서 게임 생성시 다른 유저가 참여할 수 있는 링크 생성
- 링크로 접속시 사용자 이름을 입력하고 Start 버튼을 눌러 게임을 시작할 수 있음
- 게임 페이지에는 n x n 의 영어 글자가 랜덤하게 배치되어 있고 등록한 영어 단어가 중간에 섞여 있으며 유저가 클릭하여 단어를 찾을 수 있음. (자세한 설명은 직접 게임을 해보길 바람.)
- 유저가 연결된 단어를 클릭하지 않거나 없는 단어를 클릭할시 틀렸다는 표시를 보여주기.
- 정답 단어를 클릭하면 맞았다는 표시를 해주고 해당 표시가 유지되게 구현하기.
- 게임 페이지 좌측에는 찾아야 할 단어 리스트가 보여지고 유저가 단어를 찾으면 표시되어야 함.
- 게임 페이지 우측에는 현황판이 존재하며 유저들의 현재 점수와 소요 시간을 볼 수 있음 (1~3위는 강조 표시를 할 것)
- 게임 페이지 상단에는 게임 시작 후 현재 시간이 얼마나 흘렀는지 볼 수 있으며 제목과 설명이 표시됨.
- 기타 설명이 부족한 부분은 실제 게임 사이트를 보면서 참고할 것.


- 게임을 만드는 페이지인 Word Search Maker의 html와 css를 조금 추가한 정적페이지를 만들었습니다.
- word search maker에서 단어를 저장할 db인, word-search-game 생성하였습니다.


static/js/index.js

handleSubmit()
-form에서 submit이벤트가 일어나면 실행되는 함수
checkOnlyOne()
-checkbox가 하나만 체크가 되도록 하는 함수

findSubject()
-checkbox의 내용을 얻는 함수

checkWordLength()
-단어가 10개 미만이 입력되면 error처리로직을 추가하였습니다.


python/makeAnswer

make_words_answer()
-단어의 정답을 만들어 단어와 처음 위치와 방향을 넣은 배열을 
리턴하는 함수 

set_words_location
-단어의 정답 위치를 지정하는 함수 

dfs_right 
-단어가 오른쪽으로 정렬될때 오류검출을 위해 깊이우선탐색을 한후 
값을 채워 넣는다.

dfs_down
-단어가 아래로 정렬될때 오류검출을 위해 깊이우선탐색을 한후 
값을 채워 넣는다.

dfs_right_down
-단어가 오른쪽 아래로 정렬될때 오류검출을 위해 깊이우선탐색을 한후 
값을 채워 넣는다.


python/sql

insert_word_location 
-단어의 정보(단어, 위치등)을 words테이블에 저장하는 함수 

insert_game_info
-게임의 정보를 games테이블에 저장하는 함수 

read_game_info
-games와 words를 JOIN하여 아이디에 해당하는 게임 정보를 모두 가져온다.

check_answer_db 
-단어를 받아서 단어가 db에 있는지 확인한다. 
단어가 db에 없으면 sql문에서 None을 리턴하기 때문에 이것을 이용하여
None을 리턴하면 없다는 처리를 하고 그 외에 경우에는 있다는 처리를 
한다.

main.py 

/game POST -> create_game 
-/game에 대한 POST요청이 오면 게임 정보를 받아서 db에 저장한다  => create과정!

/game GET -> get_game_info
-/game에 대한 GET요청이 오면 db에서 게임 정보를 받아서 클라이언트에 
응답한다. 

/answer{단어} GET -> check_answer
-path로 단어와 함께 answer요청이 오면 단어가 db에 있는지 확인하고 
그에 맞는 요청을 클라이언트에 보낸다. 
존재하면 exist를 보내고 존재하지 않으면 noexist를 보낸다. 


play.html은 게임을 하는 페이지 이다. 

js/play.js

fetchGame 
-서버에 /game에 대한 get요청을 보내어 게임정보를 받아서 
displayGame함수로 game을 페이지에 표현한다.

displayGame 
-페이지에 game정보를 표현한다. 이때 페이지에 표현하기 위해 
함수를 displayWord, displayBoard를 사용하였다.

displayWord
- 정답 단어를 보드 오른쪽에 나타내는 함수 

displayBoard 
- 정답 단어를 보드에 넣는 함수 

completeBoard
- 빈칸에 랜덤으로 문자를 넣는다. 

게임 동작 함수 
handleMouseDown 
- 마우스가 눌리면 실행되는 함수로 마우스를 움직이는 이벤트를 생성하고 
드래그가 되도록 동작하는 함수 
마우스가 눌렸다가 풀리면 서버에 get요청을 하여 정답인지 아닌지 확인한다.

handleMouseMove
-마우스가 눌렸을때 마우스가 움직이면 실행되는 함수로 마우스에 움직임에 따라 
칸에 색을 칠하고 word를 갱신한다. 

마우스가 풀리면 /answer{word}에 대한 get요청을 보내서 단어가
정답인지 확인하고 정답이면 정답단어를 지우고 보드의 색깔을 유지한다.
정답이 아니면 블럭들을 다시 휜색으로 칠한다.